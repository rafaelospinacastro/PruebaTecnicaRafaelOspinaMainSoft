@page "/autor"
@using PruebaDoubleV.Shared
@inject HttpClient Http
@inject NavigationManager Navigate
<h1>Autor</h1>

<p>Listado de Autores cargadas</p>

@if (forecasts == null)
{

    <p><em>Cargando...</em></p>
}
else
{
    <NavLink class="nav-link" href="CrearAutor">
        <span class="oi oi-plus" aria-hidden="true"></span> Nuevo Autor
    </NavLink>
    <table class="table">
        <thead>
            <tr>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th hidden>ID</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Nombres</td>
                    <td>@forecast.Apellidos</td>
                    <td hidden>@forecast.Id</td>
                    <td>
                        <NavLink class="nav-link" href="CrearPersona">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Editar
                        </NavLink>
                        <NavLink class="nav-link" @onclick="()=>Borrar(forecast.Id)" href="autor">
                            <span class="oi oi-trash" aria-hidden="true"></span> Borrar
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<AutorDTO.AutorResponse> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<IEnumerable<AutorDTO.AutorResponse>>("Autor");
    }
    protected async Task Borrar(int id)
    {
        await Http.DeleteAsync("Autor/" + Convert.ToInt32(id));
        Navigate.NavigateTo("autor", forceLoad: true);
    }
}

